{% set version = "0.6.0" %}  # PEP 386

{% set number = "1" %}
{% set cuda_enabled = cuda_compiler_version is not undefined and cuda_compiler_version == '11.0' %}
{% set build_ext = "cuda" if cuda_enabled else "cpu" %}
{% set build_string = "h{}_{}".format(PKG_HASH, number) %}
{% set build_string_ext = "{}_{}".format(build_string, build_ext) %}
{% set py_build_string_ext = "py{}{}_{}".format(CONDA_PY, build_string, build_ext) %}
{% set py_build_string = "py{}{}".format(CONDA_PY, build_string) %}
{% set install_base = "opt/hdk" %}
{% set arrow_version = "11.*" %}
{% set arrow_proc_version = "3.*" %}
{% set llvm_version = "14" %}

package:
  name: hdk
  version: {{ version }}

source:
#  git_url: https://github.com/intel-ai/hdk
#  git_branch: release/v{{ version }}
#  git_rev: 798103ac37f9badd540b4f4508ca180162eeb654
  url: https://github.com/intel-ai/hdk/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 0396d5133666dee23fedb568acfbb49bfd8e36e149ed7e554a5bd9acda310a97

build:
  number: {{ number }}
  skip: True  # [cuda_compiler_version not in (undefined, "None", "11.0")]
  skip: True  # [not linux64 and not win64]

outputs:

  - name: pyhdk
    version: {{ version }}
    script: build-hdk.sh  # [not win]
    script: build-hdk.bat  # [win]
    build:
      string: {{ py_build_string_ext }}
      skip: True  # [py not in (38, 39, 310, 311)]
      missing_dso_whitelist:
        - '*/libcuda.*'  # [cuda_compiler_version not in (undefined, "None")]
        - '*/libjvm.so'
      track_features:
        {{ "- arrow-cuda" if cuda_enabled else "" }}
      rpaths:
        - lib
        # path for libjvm.so searching
        - lib/server
        - lib/jvm/lib/server
        # fixes "overlinking check failed"
        - {{ install_base }}/lib64
    requirements:
      build:
        - cmake
        # c compiler is specified here to get run constraint pins correct, presumably..
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler("cuda") }}  # [cuda_compiler_version not in (undefined, "None")]
        - clangdev {{ llvm_version }}
        # clang++ is used for generating the bytecodes of extension functions
        - clangxx {{ llvm_version }}
        - llvmdev {{ llvm_version }}
        - make  # [not win]
        - maven
        - vs2022_win-64  # [win]
      host:
        # If no version limit is specified for python then conda goes
        # crazy and is unable to create host env on windows.
        - python >=3.8
        - cython
        - numpy
        - tbb-devel
        - glog
        # Folly and fmt are mutially exclusive on linux but fmt is
        # requred on windows.
        - fmt  # [win]
        - folly 2022.11.07.00  # [not win]
        - libsqlite 3.40.0  # [not win]
        - boost-cpp  # [not win]
        # With boost-cpp 1.78.0 cmake on windows doesn't find boost
        # libraries like boost::log which is necessary for linking
        # pyhdk stuff, therefore cmake expression
        # $<TARGET_FILE_DIR:${Boost_LOG_LIBRARY}> results in empty
        # string which results in /LIBPATH: with empty argument which
        # upsets MS linker and breaks pyhdk installation. On Linux
        # folly version needs version 1.78.0 so this is currently
        # windows specific.
        - boost-cpp >1.78.0  # [win]
        - llvm {{ llvm_version }}
        - arrow-cpp ={{ arrow_version }}=*{{ build_ext }}
        - pyarrow ={{ arrow_version }}=*{{ build_ext }}
      run:
        - arrow-cpp-proc {{ arrow_proc_version }} {{ build_ext }}
        - pyarrow ={{ arrow_version }}=*{{ build_ext }}
        - python
        - openjdk 17.*
        - zlib
        - tbb
        - boost-cpp
        - folly 2022.11.07.00  # [not win]

      run_constrained:
        - arrow-cpp-proc {{ arrow_proc_version }} {{ build_ext }}
        - cudatoolkit >=11.0  # [cuda_compiler_version not in (undefined, "None")]

    test:
      requires:
        - pytest
        - numpy
        - pandas
      imports:
        - pyhdk
      source_files:
        - python/tests/test_pyhdk_bindings.py
        - python/tests/test_pyhdk_sql.py
      commands:
        - python python/tests/test_pyhdk_bindings.py
        - python python/tests/test_pyhdk_sql.py

    about:
      home: https://github.com/intel-ai/hdk
      license: Apache-2.0
      license_family: APACHE
      license_file: LICENSE
      summary: oneHDK

      description: |
        oneHDK
      doc_url: https://github.com/intel-ai/hdk
      dev_url: https://github.com/intel-ai/hdk

about:
  home: https://github.com/intel-ai/hdk
  license: Apache-2.0
  license_family: APACHE
  license_file: LICENSE
  summary: oneHDK

  description: |
    oneHDK
  doc_url: https://github.com/intel-ai/hdk
  dev_url: https://github.com/intel-ai/hdk

extra:
  recipe-maintainers:
    - alexbaden
    - ienkovich
    - Garra1980
    - vlad-penkin
    - leshikus
